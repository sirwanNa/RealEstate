// <auto-generated />
using System;
using RealEstate.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RealEstate.Infrastructure.Migrations
{
    [DbContext(typeof(RealEstateDbContext))]
    [Migration("20250513064805_PropertyType_Index")]
    partial class PropertyType_Index
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("re")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RealEstate.Domain.Entities.Blog.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UrlTitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Title", "Language")
                        .IsUnique();

                    b.HasIndex("UrlTitle", "Language")
                        .IsUnique();

                    b.ToTable("Article", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Blog.ArticleTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("ArticleId", "TagId", "Language")
                        .IsUnique();

                    b.ToTable("ArticleTag", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Contact", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeatureType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PropertyInventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyInventoryId");

                    b.ToTable("PropertyFeature", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AfterHandoverPayment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("BrochureLink")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("BuilderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("DuringProjectPayment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FinishDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HandoverPayment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PositionType")
                        .HasColumnType("int");

                    b.Property<string>("Prepayment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartDate")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StructureType")
                        .HasColumnType("int");

                    b.Property<string>("TotalOfRooms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuilderId");

                    b.HasIndex("RegionId");

                    b.ToTable("PropertyInventory", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyInventoryTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("PaymentConditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("PropertyInventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UrlTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyInventoryId", "Language")
                        .IsUnique();

                    b.HasIndex("Title", "Language")
                        .IsUnique();

                    b.HasIndex("UrlTitle", "Language")
                        .IsUnique();

                    b.ToTable("PropertyInventoryTitle", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<Guid>("PropertyInventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("PropertyInventoryId", "TagId", "Language")
                        .IsUnique();

                    b.ToTable("PropertyTag", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PropertyInventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RealEstateType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyInventoryId", "RealEstateType")
                        .IsUnique();

                    b.ToTable("PropertyType", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Setting.Constant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Constant", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Setting.ConstantTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConstantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ConstantId", "Language");

                    b.ToTable("ConstantTitle", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Setting.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RelatedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RelatedId", "FileName");

                    b.ToTable("Document", "re");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Blog.ArticleTag", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.Blog.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.Setting.Constant", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyFeature", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.RealEstate.PropertyInventory", "PropertyInventory")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("PropertyInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyInventory");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyInventory", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.Setting.Constant", "Builder")
                        .WithMany("PropertyInventory_Builders")
                        .HasForeignKey("BuilderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.Setting.Constant", "Region")
                        .WithMany("PropertyInventory_Regions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Builder");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyInventoryTitle", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.RealEstate.PropertyInventory", "PropertyInventory")
                        .WithMany("PropertyInventoryTitles")
                        .HasForeignKey("PropertyInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyInventory");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyTag", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.RealEstate.PropertyInventory", "PropertyInventory")
                        .WithMany("PropertyTags")
                        .HasForeignKey("PropertyInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.Setting.Constant", "Tag")
                        .WithMany("PropertyTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyInventory");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyType", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.RealEstate.PropertyInventory", "PropertyInventory")
                        .WithMany("PropertyTypes")
                        .HasForeignKey("PropertyInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyInventory");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Setting.ConstantTitle", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.Setting.Constant", "Constant")
                        .WithMany("ConstantTitles")
                        .HasForeignKey("ConstantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Constant");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Blog.Article", b =>
                {
                    b.Navigation("ArticleTags");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.RealEstate.PropertyInventory", b =>
                {
                    b.Navigation("PropertyFeatures");

                    b.Navigation("PropertyInventoryTitles");

                    b.Navigation("PropertyTags");

                    b.Navigation("PropertyTypes");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Setting.Constant", b =>
                {
                    b.Navigation("ArticleTags");

                    b.Navigation("ConstantTitles");

                    b.Navigation("PropertyInventory_Builders");

                    b.Navigation("PropertyInventory_Regions");

                    b.Navigation("PropertyTags");
                });
#pragma warning restore 612, 618
        }
    }
}
